-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  var state = c.fst;
  var world = c.snd;

  case stmt of
    Assn (varName, expr) -> [state <- [varName, evalExpr(state, expr)], world]
  | Seq (stmt1, stmt2) -> eval(eval(c, stmt1), stmt2)
  | Skip -> c
  | Read (varName) -> 
      case readWorld(world) of
        [value, newWorld] -> [state <- [varName, value], newWorld]
      esac
  | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | If (condition, body, elsePart) ->
    case evalExpr(state, condition) of
      0 -> eval([state, world], elsePart)
    | _ -> eval([state, world], body)
    esac
  | node@While (condition, body) ->
    case evalExpr(state, condition) of
      0 -> [state, world]
    | _ -> eval(eval([state, world], body), node)
    esac
  | DoWhile(body, condition) -> eval(eval(c, body), While(condition, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
