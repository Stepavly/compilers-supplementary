-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun parens(p) {
  inbr (s ("("), p, s (")"))
}

fun binop (l, bop, r) {
  Binop (bop, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
    exp = memo $ eta expr ({
      [Left, {[s ("!!"), binop]}],
      [Left, {[s ("&&"), binop]}],
      [Nona, {[s ("<"), binop], [s ("<="), binop], [s (">"), binop], [s (">="), binop], [s ("=="), binop], [s ("!="), binop]}],
      [Left, {[s ("+"), binop], [s ("-"), binop]}],
      [Left, {[s ("*"), binop], [s ("/"), binop], [s ("%"), binop]}]
    }, primary),
    ifHead = memo $ eta syntax (kIf condition=exp kThen body=stmts tail=ifTail {If (condition, body, tail)}),
    ifTail = memo $ eta syntax (kElif condition=exp kThen body=stmts tail=ifTail {If (condition, body, tail)} |
                                kElse body=stmts kFi {body}                                                   |
                                kFi {Skip});

var stmt = memo $ eta syntax (
  kRead x=parens[lident] {Read (x)}                                                                                                 |
  kWrite x=parens[exp]  {Write (x)}                                                                                                 |
  kSkip {Skip}                                                                                                                      |
  target=lident s[":="] value=exp {Assn (target, value)}                                                                            |
  ifStmt=ifHead {ifStmt}                                                                                                            |
  kWhile condition=exp kDo body=stmts kOd {While (condition, body)}                                                                 |
  kDo body=stmts kWhile condition=exp kOd {DoWhile(body, condition)}                                                                |
  kFor iterator=stmts s[","] condition=exp s[","] step=stmts kDo body=stmts kOd {Seq (iterator, While(condition, Seq(body, step)))}
);

var stmts = memo $ eta syntax (
  stmt |
  head=stmt s[";"] tail=stmts {Seq (head, tail)}
);
   

-- Public top-level parser
public parse = stmts;
