-- Expression evaluator

import List;
import State;
import World;
-- import Utils;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (bop, left, right) {
  case bop of
    "+" -> left + right
  | "-" -> left - right
  | "*" -> left * right
  | "/" -> left / right
  | "%" -> left % right
  | "!!" -> left !! right
  | "&&" -> left && right
  | "==" -> left == right
  | "!=" -> left != right
  | "<=" -> left <= right
  | "<" -> left < right
  | ">=" -> left >= right
  | ">" -> left > right
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

public fun eval (conf@[state, world], expr) {
  case expr of
    Skip -> [conf, Nothing]
  | Var (varName) -> [conf, state (varName)]
  | Const (n) -> [conf, n]
  | Ref (r) -> [conf, r]
  | Read (varExpr) -> 
      case eval (conf, varExpr) of
        [[state, world], varName] ->
          case readWorld(world) of
            [value, newWorld] -> [[state <- [varName, value], newWorld], Nothing]
          esac
      esac
  | Write (expr) -> 
      case eval (conf, expr) of
        [[state, world], value] -> [[state, writeWorld (value, world)], Nothing]
      esac
  | Binop (bop, left, right) -> 
      case eval (conf, left) of
        [conf, leftValue] ->
          case eval (conf, right) of
            [conf, rightValue] -> 
                [conf, evalOp (bop, leftValue, rightValue)]
          esac
      esac
  | Ignore (expr) -> 
      case eval(conf, expr) of
        [conf, _] -> [conf, Nothing]
      esac
  | Assn (targetNode, valueNode) -> 
      case eval (conf, targetNode) of
        [conf, varName] ->
            case eval (conf, valueNode) of
              [[state, world], value] -> [[state <- [varName, value], world], value]
            esac
      esac
  | Seq (head, tail) ->
      case eval (conf, head) of
        [conf, _] -> eval (conf, tail)
      esac
  | If (condition, ifBody, elseBody) ->
    case eval (conf, condition) of
      [conf, 0] -> eval (conf, elseBody)
    | [conf, n] -> eval (conf, ifBody)
    esac
  | node@While (condition, body) ->
    case eval (conf, condition) of
      [conf, 0] -> [conf, Nothing]
    | [conf, _] -> 
        case eval (conf, body) of
          [conf, _] -> eval (conf, node)
        esac
    esac
  | DoWhile (body, condition) -> eval (conf, Seq (body, While (condition, body)))
  | other -> failure (other.string)
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
