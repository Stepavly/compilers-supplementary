-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalSingle ([stack, state, world], instruction) {
  case instruction of
    READ -> 
      case readWorld(world) of
        [value, newWorld] -> [value:stack, state, newWorld]
      esac
  | WRITE -> 
      [tl(stack), state, writeWorld(hd(stack), world)]
  | BINOP (bop) ->
      case stack of
        snd:fst:tail -> [evalBinop(fst, snd, bop):tail, state, world]
      esac
  | LD (varName) ->
      [state(varName):stack, state, world]
  | ST (varName) ->
      [stack, state <- [varName, hd(stack)], world]
  | CONST (n) ->
      [n:stack, state, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of 
    {} -> c
  | ins:insns1 -> eval(evalSingle(c, ins), insns1)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (varName) -> { LD (varName) }
  | Const (num) -> { CONST (num) }
  | Binop (bop, left, right) -> compileExpr(left) +++ compileExpr(right) +++ { BINOP (bop) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (varName, expr) -> compileExpr(expr) +++ { ST (varName) }
  | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
  | Skip -> {}
  | Read (varName) -> { READ, ST (varName) }
  | Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac
}
